{
  "api/OmiyaGames.Web.Security.DebugWebDomainInfo.html": {
    "href": "api/OmiyaGames.Web.Security.DebugWebDomainInfo.html",
    "title": "Class DebugWebDomainInfo | Web Security documentation",
    "keywords": "Class DebugWebDomainInfo Helper debug methods for OmiyaGames.Web.Security namespace. WebDomainVerifier Inheritance Object DebugWebDomainInfo Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public static class DebugWebDomainInfo Remarks The MIT License (MIT) Copyright (c) 2016-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-preview.1 Date: 5/20/2020 Author: Taro Omiya Initial verison. Methods GetDebugMessage(WebDomainVerifier, StringBuilder) Generates a debug message based on info about webChecker Declaration public static string GetDebugMessage(WebDomainVerifier webChecker, StringBuilder builder) Parameters Type Name Description WebDomainVerifier webChecker StringBuilder builder Returns Type Description String"
  },
  "api/OmiyaGames.Web.Security.Editor.html": {
    "href": "api/OmiyaGames.Web.Security.Editor.html",
    "title": "Namespace OmiyaGames.Web.Security.Editor | Web Security documentation",
    "keywords": "Namespace OmiyaGames.Web.Security.Editor Classes WebDomainVerifierEditor Editor for WebDomainVerifier . Appears under inspector when selecting the asset. WebDomainVerifierPropertyDrawer for WebDomainVerifier . Auto-sets the variable if it's null. WebDomainVerifierSettingsProvider Editor for WebDomainVerifier . Appears under the Properties window."
  },
  "api/OmiyaGames.Web.Security.Editor.WebDomainVerifierEditor.html": {
    "href": "api/OmiyaGames.Web.Security.Editor.WebDomainVerifierEditor.html",
    "title": "Class WebDomainVerifierEditor | Web Security documentation",
    "keywords": "Class WebDomainVerifierEditor Editor for WebDomainVerifier . Appears under inspector when selecting the asset. Inheritance Object WebDomainVerifierEditor Namespace : OmiyaGames.Web.Security.Editor Assembly : cs.temp.dll.dll Syntax public class WebDomainVerifierEditor : SettingsEditor Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.2.0-preview.1 Date: 6/29/2020 Author: Taro Omiya Initial verison. Version: 1.1.0 Date: 2/4/2022 Author: Taro Omiya Refactor some code to OmiyaGames.Global namespace. Properties SidebarDisplayPath Declaration public override string SidebarDisplayPath { get; } Property Value Type Description String"
  },
  "api/OmiyaGames.Web.Security.Editor.WebDomainVerifierPropertyDrawer.html": {
    "href": "api/OmiyaGames.Web.Security.Editor.WebDomainVerifierPropertyDrawer.html",
    "title": "Class WebDomainVerifierPropertyDrawer | Web Security documentation",
    "keywords": "Class WebDomainVerifierPropertyDrawer for WebDomainVerifier . Auto-sets the variable if it's null. Inheritance Object WebDomainVerifierPropertyDrawer Namespace : OmiyaGames.Web.Security.Editor Assembly : cs.temp.dll.dll Syntax public class WebDomainVerifierPropertyDrawer : SettingsPropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.2.0-preview.1 Date: 9/27/2020 Author: Taro Omiya Initial verison. Version: 1.1.0 Date: 2/4/2022 Author: Taro Omiya Refactor some code to OmiyaGames.Global namespace. Properties SidebarDisplayPath Declaration public override string SidebarDisplayPath { get; } Property Value Type Description String Methods Reset(SerializedProperty) Declaration public override void Reset(SerializedProperty property) Parameters Type Name Description SerializedProperty property"
  },
  "api/OmiyaGames.Web.Security.Editor.WebDomainVerifierSettingsProvider.html": {
    "href": "api/OmiyaGames.Web.Security.Editor.WebDomainVerifierSettingsProvider.html",
    "title": "Class WebDomainVerifierSettingsProvider | Web Security documentation",
    "keywords": "Class WebDomainVerifierSettingsProvider Editor for WebDomainVerifier . Appears under the Properties window. Inheritance Object WebDomainVerifierSettingsProvider Namespace : OmiyaGames.Web.Security.Editor Assembly : cs.temp.dll.dll Syntax public class WebDomainVerifierSettingsProvider : SettingsProvider Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.2.0-preview.1 Date: 6/29/2020 Author: Taro Omiya Initial verison. Constructors WebDomainVerifierSettingsProvider(String, SettingsScope) Declaration public WebDomainVerifierSettingsProvider(string path, SettingsScope scope = null) Parameters Type Name Description String path SettingsScope scope Fields AssetFileName Declaration public const string AssetFileName = \"WebSecuritySettings.asset\" Field Value Type Description String DescriptionMessage Declaration public const string DescriptionMessage = \"Any domain string received from any sources (in the list below or a file downloaded from the \\\"Remote Domain List\\\" fields) will be compared to the hostname of the website this application's WebGL build is running on. For example, the hostname for \\\"www.google.com/search?q=help\\\" is \\\"www.google.com\\\", while \\\"google.com/?search?q=help\\\" is \\\"google.com\\\". The status of this comparison will be set to this script's CurrentState property, and optional redirect the player to a specified website.\\n\\nDomain string can contain wild cards: * matches a string of characters, while ? matches zero or one character. For example, \\\"*.google.com\\\" will match \\\"www.google.com\\\", \\\"o.google.com\\\", and \\\".google.com\\\", while \\\"?.google.com\\\" will only match \\\"o.google.com\\\", and \\\".google.com\\\"\" Field Value Type Description String UxmlPath Declaration public const string UxmlPath = \"Packages/com.omiyagames.web.security/Editor/WebDomainVerifier.uxml\" Field Value Type Description String Properties Asset Declaration public static WebDomainVerifier Asset { get; } Property Value Type Description WebDomainVerifier IsSettingsAvailable Declaration public static bool IsSettingsAvailable { get; } Property Value Type Description Boolean Methods CreateSettingsProvider() Registers this . Declaration public static SettingsProvider CreateSettingsProvider() Returns Type Description SettingsProvider OnActivate(String, VisualElement) Declaration public override void OnActivate(string searchContext, VisualElement rootElement) Parameters Type Name Description String searchContext VisualElement rootElement"
  },
  "api/OmiyaGames.Web.Security.html": {
    "href": "api/OmiyaGames.Web.Security.html",
    "title": "Namespace OmiyaGames.Web.Security | Web Security documentation",
    "keywords": "Namespace OmiyaGames.Web.Security Classes DebugWebDomainInfo Helper debug methods for OmiyaGames.Web.Security namespace. WebDomainVerifier StateChangeEventArgs Event arguments used to indicate how a state has changed. See OnBeforeStateChange and OnAfterStateChange . VerifyEventArgs Event arguments used to provide information on verify events. See OnBeforeVerifyWebDomain and OnAfterVerifyWebDomain . WebDomainVerifier Original code by andyman from Github: https://gist.github.com/andyman/e58dea85cce23cccecff Extra modifications by jcx from Github: https://gist.github.com/jcx/93a3fc93531911add8a8 For WebGL builds, this script grabs the domain of the website this game is running on, and verifies it against two lists: The list of strings in DefaultDomainList . Optionally, if RemoteDomainListUrl isn't an empty string (or null), this script will attempt to download from the specified url, and read it as a . If successful, the globs listed in the will be used to match the domain as well. Remember that if the is encrypted, the OmiyaGames.Web.Security.WebDomainVerifier.domainDecrypter needs to be set in the Unity inspector to help decrypt the content of the list. Don't forget to run the VerifyWebDomain() coroutine! When it finished, the CurrentState will be set, indicating whether a match was found or not. Here's an example: [SerializeField] private WebDomainVerifier domainVerifier; IEnumerator Start() { yield return StartCoroutine(domainVerifier.VerifyWebDomain()); Debug.Log(domainVerifier.CurrentState); } WebLocationChecker Original code by andyman from Github: https://gist.github.com/andyman/e58dea85cce23cccecff Extra modifications by jcx from Github: https://gist.github.com/jcx/93a3fc93531911add8a8 Add this script to an object in the first scene of your game. For WebGL builds, this script grabs the domain the game is running on, and verifies it against two lists: The list of strings in DefaultDomainList . Optionally, if RemoteDomainListUrl isn't an empty string (or null), this script will attempt to download from the specified url, and read it as a . If successful, the globs listed in the will be used to match the domain as well. Remember that if the is encrypted, the OmiyaGames.Web.Security.WebLocationChecker.domainDecrypter needs to be set in the Unity inspector to help decrypt the content of the list. Don't forget to run the CheckDomainList() coroutine! When it finished, the CurrentState will be set, indicating whether a match was found or not. Here's an example: IEnumerator Start() { WebLocationChecker checker = GetComponent<WebLocationChecker>(); yield return StartCoroutine(checker.CheckDomainList()); Debug.Log(checker.CurrentState); } If the script is attached to a with already attached, the above example code will run automatically on SceneAwake() . Enums WebDomainVerifier.State Indicates progression and result of this script. WebLocationChecker.State Indicates progression and result of this script. Delegates WebDomainVerifier.OnStateChange WebDomainVerifier.OnVerifyWebDomain"
  },
  "api/OmiyaGames.Web.Security.StateChangeEventArgs.html": {
    "href": "api/OmiyaGames.Web.Security.StateChangeEventArgs.html",
    "title": "Class StateChangeEventArgs | Web Security documentation",
    "keywords": "Class StateChangeEventArgs Event arguments used to indicate how a state has changed. See OnBeforeStateChange and OnAfterStateChange . Inheritance Object EventArgs StateChangeEventArgs Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public class StateChangeEventArgs : EventArgs Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.2.0-preview.1 Date: 9/29/2020 Author: Taro Omiya Initial verison. Constructors StateChangeEventArgs(WebDomainVerifier.State, WebDomainVerifier.State) Constructor to set the read-only properties. Declaration public StateChangeEventArgs(WebDomainVerifier.State oldState, WebDomainVerifier.State newState) Parameters Type Name Description WebDomainVerifier.State oldState Sets OldState . WebDomainVerifier.State newState Sets NewState . Properties NewState The latest value this event is setting it's state into. Declaration public WebDomainVerifier.State NewState { get; } Property Value Type Description WebDomainVerifier.State OldState The state prior to the change. Declaration public WebDomainVerifier.State OldState { get; } Property Value Type Description WebDomainVerifier.State"
  },
  "api/OmiyaGames.Web.Security.VerifyEventArgs.html": {
    "href": "api/OmiyaGames.Web.Security.VerifyEventArgs.html",
    "title": "Class VerifyEventArgs | Web Security documentation",
    "keywords": "Class VerifyEventArgs Event arguments used to provide information on verify events. See OnBeforeVerifyWebDomain and OnAfterVerifyWebDomain . Inheritance Object EventArgs VerifyEventArgs Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public class VerifyEventArgs : EventArgs Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.2.0-preview.1 Date: 9/29/2020 Author: Taro Omiya Initial verison. Constructors VerifyEventArgs() Constructs new argument, setting StartTime to . Declaration public VerifyEventArgs() Properties EndTime The real-time mark the verification process ended. If still processing, this variable will be set to NaN . Declaration public float EndTime { get; } Property Value Type Description Single StartTime The real-time time mark the verification process started on. Declaration public float StartTime { get; } Property Value Type Description Single VerificationDurationSeconds How long the verification process took, in seconds. If still processing, this variable will be set to NaN . Declaration public float VerificationDurationSeconds { get; } Property Value Type Description Single"
  },
  "api/OmiyaGames.Web.Security.WebDomainVerifier.html": {
    "href": "api/OmiyaGames.Web.Security.WebDomainVerifier.html",
    "title": "Class WebDomainVerifier | Web Security documentation",
    "keywords": "Class WebDomainVerifier Original code by andyman from Github: https://gist.github.com/andyman/e58dea85cce23cccecff Extra modifications by jcx from Github: https://gist.github.com/jcx/93a3fc93531911add8a8 For WebGL builds, this script grabs the domain of the website this game is running on, and verifies it against two lists: The list of strings in DefaultDomainList . Optionally, if RemoteDomainListUrl isn't an empty string (or null), this script will attempt to download from the specified url, and read it as a . If successful, the globs listed in the will be used to match the domain as well. Remember that if the is encrypted, the OmiyaGames.Web.Security.WebDomainVerifier.domainDecrypter needs to be set in the Unity inspector to help decrypt the content of the list. Don't forget to run the VerifyWebDomain() coroutine! When it finished, the CurrentState will be set, indicating whether a match was found or not. Here's an example: [SerializeField] private WebDomainVerifier domainVerifier; IEnumerator Start() { yield return StartCoroutine(domainVerifier.VerifyWebDomain()); Debug.Log(domainVerifier.CurrentState); } Inheritance Object WebDomainVerifier Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public class WebDomainVerifier : ScriptableObject Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.2.0-preview.1 Date: 6/29/2020 Author: Taro Omiya Initial verison. Version: 0.2.0-preview.2 Date: 10/1/2020 Author: Taro Omiya Exposing DomainDecrypter . Fields RemoteDomainListHeader Header string for the Unity Inspector. Declaration public const string RemoteDomainListHeader = \"Remote Domain List\" Field Value Type Description String SidebarDisplayPath Path where this asset will be created. Declaration public const string SidebarDisplayPath = \"Project/Omiya Games/Web Security\" Field Value Type Description String Properties AllUniqueDomains The of all unique domains. Keys are the globs, and values are the regular expression equivalent. Declaration public Dictionary<string, Regex> AllUniqueDomains { get; } Property Value Type Description Dictionary < String , Regex > CurrentState Indicates the state this script is in. WebDomainVerifier.State Declaration public WebDomainVerifier.State CurrentState { get; } Property Value Type Description WebDomainVerifier.State DefaultDomainList The default list of domains to match RetrievedHostName against. This list excludes the globs stored in a . RemoteDomainListUrl Declaration public string[] DefaultDomainList { get; } Property Value Type Description String [] DomainDecrypter Gets the cryptographer that decrypts the domain list downloaded from RemoteDomainListUrl . Declaration public StringCryptographer DomainDecrypter { get; } Property Value Type Description StringCryptographer DownloadDomainsUrl The URL used to download a . Slightly randomized to prevent predictablity. Declaration public string DownloadDomainsUrl { get; } Property Value Type Description String DownloadedDomainList The list of globs in a , if successfully downloaded. Declaration public string[] DownloadedDomainList { get; } Property Value Type Description String [] DownloadErrorMessage Indicates the error when attempting to download a . Declaration public string DownloadErrorMessage { get; } Property Value Type Description String IsDomainListSuccessfullyDownloaded Indicates if a was downloaded or not. Declaration public bool IsDomainListSuccessfullyDownloaded { get; } Property Value Type Description Boolean IsDownloadingARemoteDomainList True if downloading a domain list from a remote URL. Declaration public bool IsDownloadingARemoteDomainList { get; } Property Value Type Description Boolean RemoteDomainListUrl The original URL to download a from. DownloadDomainsUrl Declaration public string RemoteDomainListUrl { get; } Property Value Type Description String RetrievedHostName The domain this WebGL build is running on. Declaration public string RetrievedHostName { get; } Property Value Type Description String Methods ForceRedirect() Makes the build redirect the browser to OmiyaGames.Web.Security.WebDomainVerifier.redirectURL . Declaration public void ForceRedirect() VerifyWebDomain() Declaration public IEnumerator VerifyWebDomain() Returns Type Description IEnumerator Events OnAfterStateChange Called right after CurrentState changes to a new value. Declaration public event WebDomainVerifier.OnStateChange OnAfterStateChange Event Type Type Description WebDomainVerifier.OnStateChange OnAfterVerifyWebDomain Called around when the VerifyWebDomain() coroutine finishes. Declaration public event WebDomainVerifier.OnVerifyWebDomain OnAfterVerifyWebDomain Event Type Type Description WebDomainVerifier.OnVerifyWebDomain OnBeforeStateChange Called right before CurrentState changes to a new value. Declaration public event WebDomainVerifier.OnStateChange OnBeforeStateChange Event Type Type Description WebDomainVerifier.OnStateChange OnBeforeVerifyWebDomain Called just as the VerifyWebDomain() coroutine starts processing. Declaration public event WebDomainVerifier.OnVerifyWebDomain OnBeforeVerifyWebDomain Event Type Type Description WebDomainVerifier.OnVerifyWebDomain"
  },
  "api/OmiyaGames.Web.Security.WebDomainVerifier.OnStateChange.html": {
    "href": "api/OmiyaGames.Web.Security.WebDomainVerifier.OnStateChange.html",
    "title": "Delegate WebDomainVerifier.OnStateChange | Web Security documentation",
    "keywords": "Delegate WebDomainVerifier.OnStateChange Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public delegate void OnStateChange(WebDomainVerifier source, StateChangeEventArgs args); Parameters Type Name Description WebDomainVerifier source StateChangeEventArgs args"
  },
  "api/OmiyaGames.Web.Security.WebDomainVerifier.OnVerifyWebDomain.html": {
    "href": "api/OmiyaGames.Web.Security.WebDomainVerifier.OnVerifyWebDomain.html",
    "title": "Delegate WebDomainVerifier.OnVerifyWebDomain | Web Security documentation",
    "keywords": "Delegate WebDomainVerifier.OnVerifyWebDomain Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public delegate void OnVerifyWebDomain(WebDomainVerifier source, VerifyEventArgs args); Parameters Type Name Description WebDomainVerifier source VerifyEventArgs args"
  },
  "api/OmiyaGames.Web.Security.WebDomainVerifier.State.html": {
    "href": "api/OmiyaGames.Web.Security.WebDomainVerifier.State.html",
    "title": "Enum WebDomainVerifier.State | Web Security documentation",
    "keywords": "Enum WebDomainVerifier.State Indicates progression and result of this script. Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public enum State : short Fields Name Description DomainDidntMatch Indicates the domain this WebGL build is running on is not valid: it doesn't match any expected glob/string. DomainMatched Indicates the domain this WebGL build is running on is valid, matching an expected glob/string. EncounteredError Indicates there were trouble verifying the domain. Most likely, this is due to being unable to download a for verification. InProgress Indicates the script is in the middle of evaluating the domain the WebGL build is running on. This process can include downloading a . NotUsed Indicates the script hasn't verified the domain yet."
  },
  "api/OmiyaGames.Web.Security.WebLocationChecker.html": {
    "href": "api/OmiyaGames.Web.Security.WebLocationChecker.html",
    "title": "Class WebLocationChecker | Web Security documentation",
    "keywords": "Class WebLocationChecker Original code by andyman from Github: https://gist.github.com/andyman/e58dea85cce23cccecff Extra modifications by jcx from Github: https://gist.github.com/jcx/93a3fc93531911add8a8 Add this script to an object in the first scene of your game. For WebGL builds, this script grabs the domain the game is running on, and verifies it against two lists: The list of strings in DefaultDomainList . Optionally, if RemoteDomainListUrl isn't an empty string (or null), this script will attempt to download from the specified url, and read it as a . If successful, the globs listed in the will be used to match the domain as well. Remember that if the is encrypted, the OmiyaGames.Web.Security.WebLocationChecker.domainDecrypter needs to be set in the Unity inspector to help decrypt the content of the list. Don't forget to run the CheckDomainList() coroutine! When it finished, the CurrentState will be set, indicating whether a match was found or not. Here's an example: IEnumerator Start() { WebLocationChecker checker = GetComponent<WebLocationChecker>(); yield return StartCoroutine(checker.CheckDomainList()); Debug.Log(checker.CurrentState); } If the script is attached to a with already attached, the above example code will run automatically on SceneAwake() . Inheritance Object WebLocationChecker Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public class WebLocationChecker : ISingletonScript Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 5/15/2016 Author: Taro Omiya Initial verison. Date: 6/5/2018 Author: Taro Omiya Removed plain-text support. Date: 2/12/2019 Author: Taro Omiya Adding encryption support of the binary . Version: 0.1.0-preview.1 Date: 5/20/2020 Author: Taro Omiya Converting to package. Improving documentation for DocFX support. Version: 0.1.1-preview.1 Date: 5/22/2020 Author: Taro Omiya Fixing documentation to actually be XML-compliant Fields RemoteDomainListHeader Header string for the Unity Inspector. Declaration public const string RemoteDomainListHeader = \"Remote Domain List\" Field Value Type Description String Properties AllUniqueDomains The of all unique domains. Keys are the globs, and values are the regular expression equivalent. Declaration public Dictionary<string, Regex> AllUniqueDomains { get; } Property Value Type Description Dictionary < String , Regex > CurrentState Indicates the state this script is in. WebLocationChecker.State Declaration public WebLocationChecker.State CurrentState { get; } Property Value Type Description WebLocationChecker.State DefaultDomainList The default list of domains to match RetrievedHostName against. This list excludes the globs stored in a . RemoteDomainListUrl Declaration public string[] DefaultDomainList { get; } Property Value Type Description String [] DownloadDomainsUrl The URL used to download a . Slightly randomized to prevent predictablity. Declaration public string DownloadDomainsUrl { get; } Property Value Type Description String DownloadedDomainList The list of globs in a , if successfully downloaded. Declaration public string[] DownloadedDomainList { get; } Property Value Type Description String [] DownloadErrorMessage Indicates the error when attempting to download a . Declaration public string DownloadErrorMessage { get; } Property Value Type Description String IsDomainListSuccessfullyDownloaded Indicates if a was downloaded or not. Declaration public bool IsDomainListSuccessfullyDownloaded { get; } Property Value Type Description Boolean RemoteDomainListUrl The original URL to download a from. DownloadDomainsUrl Declaration public string RemoteDomainListUrl { get; } Property Value Type Description String RetrievedHostName The domain this WebGL build is running on. Declaration public string RetrievedHostName { get; } Property Value Type Description String Methods CheckDomainList() Declaration public IEnumerator CheckDomainList() Returns Type Description IEnumerator ForceRedirect() Makes the build redirect the browser to OmiyaGames.Web.Security.WebLocationChecker.redirectURL . Declaration public void ForceRedirect() SceneAwake() Declaration public override void SceneAwake() SingletonAwake() Declaration public override void SingletonAwake()"
  },
  "api/OmiyaGames.Web.Security.WebLocationChecker.State.html": {
    "href": "api/OmiyaGames.Web.Security.WebLocationChecker.State.html",
    "title": "Enum WebLocationChecker.State | Web Security documentation",
    "keywords": "Enum WebLocationChecker.State Indicates progression and result of this script. Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public enum State : short Fields Name Description DomainDidntMatch Indicates the domain this WebGL build is running on is not valid: it doesn't match any expected glob/string. DomainMatched Indicates the domain this WebGL build is running on is valid, matching an expected glob/string. EncounteredError Indicates there were trouble verifying the domain. Most likely, this is due to being unable to download a for verification. InProgress Indicates the script is in the middle of evaluating the domain the WebGL build is running on. This process can include downloading a . NotUsed Indicates the script hasn't verified the domain yet."
  },
  "index.html": {
    "href": "index.html",
    "title": "Omiya Games - Web Security | Web Security documentation",
    "keywords": "Omiya Games - Web Security Web Security is a Github package Omiya Games uses to peform various security features for WebGL builds. This includes: Web Location Checker A script that verifies the build is running on the correct host. Attach to a GameObject like any other MonoBehavior , then call the coroutine, CheckDomainList() , from another script. For example, one can create a script with the method below, then attach it to the same GameObject the WebLocationChecker is on: IEnumerator Start() { // Verify the domain WebLocationChecker checker = GetComponent<WebLocationChecker>(); yield return StartCoroutine(checker.CheckDomainList()); // Check if the domain was verified if(checker.CurrentState == WebLocationChecker.State.DomainMatched) { // Change scene to the main menu SceneManager.LoadScene(\"Main menu\"); } } The script contains the following inspector fields: Field Required? Description Remote Domain List Url No The path to download a DomainList , relative to the root of the WebGL build (typically where index.html is in). The strings in the DomainList will be used to match the domain the build is running on, in addition to strings listed in Domain Must Contain . Leave empty if no file should be downloaded. Domain Decrypter No The StringCryptographer to use to decrypt the content of the downloaded DomainList . Entirely optional, especially if the downloaded file is not expected to be encrypted. GameObjects to Deactivate No A list of GameObjects to deactivate while the script verifies the domain the build is running on. Domain Must Contain Yes A list of strings to verify whether the domain the game is running on matches. This script supports ? and * wildcards (former any single character, while the latter matches a series of character). Force Redirect No If checked, and the domain did not match, prompts the script to redirect to a different website. If this build is embedded in an iframe with redirect permission restrictions (which most browsers enable by default), the redirect may fail with an AccessDenied error. Redirect URL If Force Redirect is checked The URL to redirect to if the doamin did not match. This URL should include https:// Install There are two common methods for installing this package. Through Unity Package Manager Unity's own Package Manager supports importing packages through a URL to a Git repo : First, on this repository page, click the \"Clone or download\" button, and copy over this repository's HTTPS URL. Then click on the + button on the upper-left-hand corner of the Package Manager, select \"Add package from git URL...\" on the context menu, then paste this repo's URL! While easy and straightforward, this method has a few major downside: it does not support dependency resolution and package upgrading when a new version is released. To add support for that, the following method is recommended: Through OpenUPM Installing via OpenUPM's command line tool is recommended because it supports dependency resolution, upgrading, and downgrading this package. If you haven't already installed OpenUPM , you can do so through Node.js's npm (obviously have Node.js installed in your system first): npm install -g openupm-cli Then, to install this package, just run the following command at the root of your Unity project: openupm add com.omiyagames.web.security Resources Documentation Change Log LICENSE Overall package is licensed under MIT , unless otherwise noted in the 3rd party licenses file and/or source code. Copyright (c) 2019-2021 Omiya Games"
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Change Log: | Web Security documentation",
    "keywords": "Change Log: 1.0.0-pre.1 Upgrading version number to latest Unity package version number standards. 0.2.0-preview.3 Enhancment: upgrading the assembly definitions and package files. 0.2.0-preview.2 Enhancement: exposing WebDomainVerifier.DomainDecrypter . 0.2.0-preview.1 New Feature #1: Created WebDomainVerifier , an asset that is auto-created in the project, and will appear on the Project Settings window. 0.1.1-preview.1 Fix: Scripting API documentation for WebLocationChecker should now display. This was due to accidentally creating unknown XML tags in the comments. 0.1.0-preview.1 Initial release New Feature: added WebLocationChecker New Feature: added sample for retrieving debugging information from WebLocationChecker"
  },
  "manual/README.html": {
    "href": "manual/README.html",
    "title": "| Web Security documentation",
    "keywords": "This folder contains markdown files listed under \"Manual\" section in the documentation. When adding or removing any files in this folder, don't forget to update toc.yml accordingly!"
  }
}